from .checks.factories import generate_foreign_key_checks
from .checks.factories import generate_unique_checks
from .checks.factories import generate_type_checks
from .checks.factories import generate_geometry_checks
from .checks.factories import generate_geometry_type_checks
from .checks.factories import generate_enum_checks
from .checks.base import  ForeignKeyCheck
from .checks.base import  RangeCheck
from .checks.other import BankLevelCheck
from .checks.other import CrossSectionShapeCheck
from .checks.other import TimeseriesCheck
from .threedi_model import models


FOREIGN_KEY_CHECKS = []
UNIQUE_CHECKS = []
INVALID_TYPE_CHECKS = []
INVALID_GEOMETRY_CHECKS = []
INVALID_GEOMETRY_TYPE_CHECKS = []
INVALID_ENUM_CHECKS = []

TIMESERIES_CHECKS = [
    TimeseriesCheck(models.BoundaryCondition1D.timeseries),
    TimeseriesCheck(models.BoundaryConditions2D.timeseries),
    TimeseriesCheck(models.Lateral1d.timeseries),
    TimeseriesCheck(models.Lateral2D.timeseries),
]

RANGE_CHECKS = [
    RangeCheck(column=models.CrossSectionLocation.friction_value, lower_limit=0),
    RangeCheck(column=models.Culvert.friction_value, lower_limit=0),
    RangeCheck(column=models.GroundWater.phreatic_storage_capacity, lower_limit=0, upper_limit=1),
    RangeCheck(column=models.ImperviousSurface.area, lower_limit=0),
    RangeCheck(column=models.ImperviousSurface.dry_weather_flow, lower_limit=0),
    RangeCheck(column=models.ImperviousSurfaceMap.percentage, lower_limit=0),
    RangeCheck(column=models.Interflow.porosity, lower_limit=0, upper_limit=1),
    RangeCheck(column=models.Interflow.impervious_layer_elevation, lower_limit=0),
    RangeCheck(column=models.Orifice.discharge_coefficient_negative, lower_limit=0),
    RangeCheck(column=models.Orifice.discharge_coefficient_positive, lower_limit=0),
    RangeCheck(column=models.Orifice.friction_value, lower_limit=0),
    RangeCheck(column=models.Pipe.dist_calc_points, lower_limit=0),
    RangeCheck(column=models.Pipe.friction_value, lower_limit=0),
    RangeCheck(column=models.Pumpstation.capacity, lower_limit=0),
    RangeCheck(column=models.SimpleInfiltration.infiltration_rate, lower_limit=0),
    RangeCheck(column=models.Surface.nr_of_inhabitants, lower_limit=0),
    RangeCheck(column=models.Surface.area, lower_limit=0),
    RangeCheck(column=models.SurfaceMap.percentage, lower_limit=0, upper_limit=100),
    RangeCheck(column=models.SurfaceParameter.max_infiltration_capacity),
    RangeCheck(column=models.SurfaceParameter.min_infiltration_capacity),
    RangeCheck(column=models.SurfaceParameter.infiltration_decay_constant),
    RangeCheck(column=models.SurfaceParameter.infiltration_recovery_constant),
    RangeCheck(column=models.Weir.discharge_coefficient_negative, lower_limit=0),
    RangeCheck(column=models.Weir.discharge_coefficient_negative, lower_limit=0),
    RangeCheck(column=models.Weir.friction_value, lower_limit=0),
    RangeCheck(column=models.SurfaceParameter.outflow_delay),
]

OTHER_CHECKS = [
    BankLevelCheck(),
    # CrossSectionShapeCheck(),
]


ALL_CHECKS = []


class Config:
    """Collection of checks

    Some checks are generated by a factory. These are usually very generic
    checks which apply to many columns, such as foreign keys."""

    def __init__(self, models):
        self.models = models
        self.checks = []
        self.generate_checks()

    def generate_checks(self):
        FOREIGN_KEY_CHECKS = []
        UNIQUE_CHECKS = []
        INVALID_TYPE_CHECKS = []
        INVALID_GEOMETRY_CHECKS = []
        INVALID_GEOMETRY_TYPE_CHECKS = []
        INVALID_ENUM_CHECKS = []
        # Call the check factories:
        for model in self.models:
            FOREIGN_KEY_CHECKS += generate_foreign_key_checks(model.__table__)
            UNIQUE_CHECKS += generate_unique_checks(model.__table__)
            INVALID_TYPE_CHECKS += generate_type_checks(model.__table__)
            INVALID_GEOMETRY_CHECKS += generate_geometry_checks(model.__table__)
            INVALID_GEOMETRY_TYPE_CHECKS += generate_geometry_type_checks(model.__table__)
            INVALID_ENUM_CHECKS += generate_enum_checks(model.__table__)

        self.checks += FOREIGN_KEY_CHECKS
        self.checks += UNIQUE_CHECKS
        self.checks += INVALID_TYPE_CHECKS
        self.checks += INVALID_GEOMETRY_CHECKS
        self.checks += INVALID_GEOMETRY_TYPE_CHECKS
        self.checks += INVALID_ENUM_CHECKS
        self.checks += OTHER_CHECKS
        self.checks += TIMESERIES_CHECKS
        self.checks += RANGE_CHECKS
        return None
